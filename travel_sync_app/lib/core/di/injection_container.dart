import 'package:get_it/get_it.dart';
import 'package:dio/dio.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:hive/hive.dart';

import '../config/app_config.dart';
import '../services/location_service.dart';
import '../services/background_service.dart';
import '../network/api_client.dart';
import '../network/network_info.dart';
import '../../data/datasources/local/local_data_source.dart';
import '../../data/datasources/remote/remote_data_source.dart';
import '../../data/repositories/auth_repository_impl.dart';
import '../../data/repositories/trip_repository_impl.dart';
import '../../data/repositories/expense_repository_impl.dart';
import '../../data/models/user_model.dart';
import '../../data/models/trip_model.dart';
import '../../data/models/expense_model.dart';
import '../../domain/repositories/auth_repository.dart';
import '../../domain/repositories/trip_repository.dart';
import '../../domain/repositories/expense_repository.dart';
import '../../presentation/blocs/auth/auth_bloc.dart';
import '../../presentation/blocs/trip/trip_bloc.dart';
import '../../presentation/blocs/location/location_bloc.dart';

final getIt = GetIt.instance;

Future<void> initializeDependencies() async {
  // External dependencies
  final sharedPreferences = await SharedPreferences.getInstance();
  getIt.registerLazySingleton(() => sharedPreferences);

  // Hive boxes
  await _initializeHiveBoxes();

  // Network
  getIt.registerLazySingleton(() => Dio());
  getIt.registerLazySingleton<NetworkInfo>(() => NetworkInfoImpl());
  getIt.registerLazySingleton<ApiClient>(() => ApiClient(createDio()));

  // Services
  getIt.registerLazySingleton<LocationService>(() => LocationService());
  getIt.registerLazySingleton<BackgroundService>(() => BackgroundService());

  // Data sources
  getIt.registerLazySingleton<LocalDataSource>(() => LocalDataSourceImpl(
    sharedPreferences: getIt(),
  ));
  getIt.registerLazySingleton<RemoteDataSource>(() => RemoteDataSourceImpl(getIt()));

  // Repositories
  getIt.registerLazySingleton<AuthRepository>(
    () => AuthRepositoryImpl(
      remoteDataSource: getIt(),
      localDataSource: getIt(),
      networkInfo: getIt(),
    ),
  );

  getIt.registerLazySingleton<TripRepository>(
    () => TripRepositoryImpl(
      remoteDataSource: getIt(),
      localDataSource: getIt(),
      networkInfo: getIt(),
    ),
  );

  getIt.registerLazySingleton<ExpenseRepository>(
    () => ExpenseRepositoryImpl(
      remoteDataSource: getIt(),
      localDataSource: getIt(),
      networkInfo: getIt(),
    ),
  );

  // BLoCs
  getIt.registerFactory(() => AuthBloc(authRepository: getIt()));
  getIt.registerFactory(() => TripBloc(
        tripRepository: getIt(),
        locationService: getIt(),
      ));
  getIt.registerFactory(() => LocationBloc(locationService: getIt()));

  // Initialize background services
  await BackgroundService.initialize();
}

Future<void> _initializeHiveBoxes() async {
  // Register Hive adapters
  if (!Hive.isAdapterRegistered(0)) {
    Hive.registerAdapter(UserModelAdapter());
  }
  if (!Hive.isAdapterRegistered(1)) {
    Hive.registerAdapter(TripModelAdapter());
  }
  if (!Hive.isAdapterRegistered(2)) {
    Hive.registerAdapter(TravelModeAdapter());
  }
  if (!Hive.isAdapterRegistered(3)) {
    Hive.registerAdapter(TripTypeAdapter());
  }
  if (!Hive.isAdapterRegistered(4)) {
    Hive.registerAdapter(TripStatusAdapter());
  }
  if (!Hive.isAdapterRegistered(5)) {
    Hive.registerAdapter(LocationPointAdapter());
  }
  if (!Hive.isAdapterRegistered(6)) {
    Hive.registerAdapter(ExpenseModelAdapter());
  }
  if (!Hive.isAdapterRegistered(7)) {
    Hive.registerAdapter(ExpenseCategoryAdapter());
  }
  if (!Hive.isAdapterRegistered(8)) {
    Hive.registerAdapter(BudgetModelAdapter());
  }

  // Open Hive boxes
  getIt.registerLazySingleton<Box>(
    () => Hive.box(AppConfig.userBox),
    instanceName: AppConfig.userBox,
  );
  getIt.registerLazySingleton<Box>(
    () => Hive.box(AppConfig.tripBox),
    instanceName: AppConfig.tripBox,
  );
  getIt.registerLazySingleton<Box>(
    () => Hive.box(AppConfig.expenseBox),
    instanceName: AppConfig.expenseBox,
  );
  getIt.registerLazySingleton<Box>(
    () => Hive.box(AppConfig.settingsBox),
    instanceName: AppConfig.settingsBox,
  );

  // Open boxes
  await Hive.openBox(AppConfig.userBox);
  await Hive.openBox(AppConfig.tripBox);
  await Hive.openBox(AppConfig.expenseBox);
  await Hive.openBox(AppConfig.settingsBox);
}

// Placeholder adapters - these would be generated by build_runner
class UserModelAdapter extends TypeAdapter<UserModel> {
  @override
  final int typeId = 0;

  @override
  UserModel read(BinaryReader reader) {
    // TODO: Implement read method
    throw UnimplementedError();
  }

  @override
  void write(BinaryWriter writer, UserModel obj) {
    // TODO: Implement write method
    throw UnimplementedError();
  }
}

class TripModelAdapter extends TypeAdapter<TripModel> {
  @override
  final int typeId = 1;

  @override
  TripModel read(BinaryReader reader) {
    throw UnimplementedError();
  }

  @override
  void write(BinaryWriter writer, TripModel obj) {
    throw UnimplementedError();
  }
}

class TravelModeAdapter extends TypeAdapter<TravelMode> {
  @override
  final int typeId = 2;

  @override
  TravelMode read(BinaryReader reader) {
    throw UnimplementedError();
  }

  @override
  void write(BinaryWriter writer, TravelMode obj) {
    throw UnimplementedError();
  }
}

class TripTypeAdapter extends TypeAdapter<TripType> {
  @override
  final int typeId = 3;

  @override
  TripType read(BinaryReader reader) {
    throw UnimplementedError();
  }

  @override
  void write(BinaryWriter writer, TripType obj) {
    throw UnimplementedError();
  }
}

class TripStatusAdapter extends TypeAdapter<TripStatus> {
  @override
  final int typeId = 4;

  @override
  TripStatus read(BinaryReader reader) {
    throw UnimplementedError();
  }

  @override
  void write(BinaryWriter writer, TripStatus obj) {
    throw UnimplementedError();
  }
}

class LocationPointAdapter extends TypeAdapter<LocationPoint> {
  @override
  final int typeId = 5;

  @override
  LocationPoint read(BinaryReader reader) {
    throw UnimplementedError();
  }

  @override
  void write(BinaryWriter writer, LocationPoint obj) {
    throw UnimplementedError();
  }
}

class ExpenseModelAdapter extends TypeAdapter<ExpenseModel> {
  @override
  final int typeId = 6;

  @override
  ExpenseModel read(BinaryReader reader) {
    throw UnimplementedError();
  }

  @override
  void write(BinaryWriter writer, ExpenseModel obj) {
    throw UnimplementedError();
  }
}

class ExpenseCategoryAdapter extends TypeAdapter<ExpenseCategory> {
  @override
  final int typeId = 7;

  @override
  ExpenseCategory read(BinaryReader reader) {
    throw UnimplementedError();
  }

  @override
  void write(BinaryWriter writer, ExpenseCategory obj) {
    throw UnimplementedError();
  }
}

class BudgetModelAdapter extends TypeAdapter<BudgetModel> {
  @override
  final int typeId = 8;

  @override
  BudgetModel read(BinaryReader reader) {
    throw UnimplementedError();
  }

  @override
  void write(BinaryWriter writer, BudgetModel obj) {
    throw UnimplementedError();
  }
}
